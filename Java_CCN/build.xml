<?xml version="1.0" encoding="UTF-8"?>
<!-- This is an ant project file, see http://ant.apache.org/ -->

<!-- NOTES
  Do not use antcall with tests that depend on ccnd, because this 
  can result in more than one ccnd being run at the same time.
  If you stick to dependencies with one level of ant the ccnd
  will never be run twice regardless of the number of test targets
  that require it.
  --> 

<project default="jar" name="java-ccn">

	<!-- To avoid conflict with Eclipse, we build in 'build' not 'bin' -->
	
	<property name="lib" location="lib"/>
	<property name="build" location="build"/>
	<property name="jarfile-base" value="ccn.jar"/>
	<property name="jarfile" location="${jarfile-base}"/>
	<property name="testout" location="testout"/>
	<property name="ccnd" location="../src/ccnd/ccnd"/>
	<property name="showoutput" value="no"/>
	<property name="repozip" value="repotest.zip"/>
	<property name="CCND_CMD" value="../../ccnd/agent/ccnd"/>
	<property name="CCND_DEBUG" value="-1"/>
	<property name="REPO_ROOT" value="${testout}/repotest"/>
	<property name="REPO_LOCAL_ROOT" value="repotest"/>
	<property name="REPO_LOCAL" value="TestRepository"/>
	<property name="REPO_GLOBAL" value="parc.com/csl/ccn/repositories"/>
	<!-- To enable remote debugging, the incantation is 
	"-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n" -->
	<property name="DEBUG_OPTIONS" value=""/>
	<property name="TOP_DIR" value=".."/>
	<!-- TEST_PORT is alternative ccnd port so we can run tests
        with an isolated ccnd rather than the "live" ccnd on the machine.
        Port 9 (discard) would be ideal but this needs to be a non-privileged
        port. -->
	<property name="TEST_PORT" value="1999"/>

        <!-- Classpaths are actually defined in a separate file so 
             that it can be included by ant files of apps so they 
             don't need to separately define the classpath needed 
             for CCN lib -->

        <import file="libs.xml"/>
	<path id="classpath">
		<path refid="ccn-classpath"/>
	</path>

	<path id="classpath-run">
		<path refid="ccn-classpath-run"/>
		<pathelement location="${jarfile}"/>
	</path>

	<!-- repository directory is likely to be created by running things
        so must be excluded from jar at least -->

	<property name="build-excludes" value="bin/**, log/**, lib/**, libsrc/**, repository/**, build/**, testout/**, ktrace.out, CCN_DEBUG_DATA/**"/>

	<target name="documentation">
	  <!-- requires ant-doxygen task, see http://sourceforge.net/projects/ant-doxygen/ -->
	  <taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask"
		   classpath="lib/doxygen_ant.jar" />
		<doxygen configFilename="Doxyfile"/>
	</target>

	<target name="compile">
		<mkdir dir="${build}"/>
		<depend srcdir="." destdir="${build}" closure="yes"/>
		<javac destdir="${build}"
              srcdir="." excludes="${build-excludes}"
              source="1.5" compiler="javac1.5" debug="on">
			<classpath>
				<path refid="classpath"/>
			</classpath>
		</javac>
		<copy todir="${build}">
			<fileset dir="." excludes="${build-excludes}, **/*.java"/>
		</copy>
	</target>

	<target name="jar" depends="compile">
		<jar compress="true" jarfile="${jarfile}" basedir="${build}">
			<exclude name="**/.classpath"/>
			<exclude name="**/.project"/>
			<exclude name="repository/**"/>
			<exclude name="${jarfile-base}"/>
		</jar>
	</target>

	<target name="clean-documentation">
		<delete dir="doc"/>
	</target>

	<target name="clean-test">
		<delete dir="${testout}"/>
	</target>

	<target name="clean" depends="clean-test, clean-documentation">
		<delete dir="${build}"/>
	</target>

	<!-- Run targets: running components -->

    <target name="dumpclasspath" depends="jar">
        <pathconvert pathsep=":" property="classpatharg" refid="classpath-run"/>
        <echo message="${classpatharg}" file=".antclasspath"/>
    </target>

	<target name="ccnd" depends="jar">
		<mkdir dir="${testout}"/>
		<parallel>
			<daemons>
				<java classname="com.parc.ccn.network.daemons.CCNDaemon" fork="true" failonerror="true" output = "${testout}/TEST-ccnd-baselib.txt" dir="${testout}">
					<classpath>
						<path refid="classpath-run" />
					</classpath>
					<sysproperty key="ccn.agent.port" value="${TEST_PORT}" />
					<sysproperty key="ccn.daemon.output" value="${testout}/TEST-ccnd-baselib.txt" />
					<sysproperty key="ccnd.debug" value="${CCND_DEBUG}" />
					<arg value="-interactive" />
					<arg value="-command" />
					<arg value="${CCND_CMD}" />
				</java>
			</daemons>
            <!-- sleep needed so parallel doesn't exit before any error from daemons is reported -->
            <sleep seconds="1"/>
		</parallel>
		<sleep seconds="5"/>  <!-- Make sure really started -->
	</target>
	
	<target name="ccnd-stop">
		<mkdir dir="${testout}"/>
		<parallel>
			<daemons>
				<java classname="com.parc.ccn.network.daemons.CCNDaemon" fork="true" failonerror="true" output = "${testout}/TEST-ccnd-stop.txt" dir="${testout}">
					<classpath>
						<path refid="classpath-run" />
					</classpath>
					<arg value="-stop" />
				</java>
			</daemons>
            <!-- sleep needed so parallel doesn't exit before any error from daemons is reported -->
            <sleep seconds="1"/>
		</parallel>
		<sleep seconds="5"/>  <!-- Make sure really started -->
		<echo message="ccnd is stopped"/>
	</target>

    <!-- Run a ccnd on test port but not as daemon (i.e. keep running
         even if nothing else running under ant.  This is useful
         if you need to separately start a ccnd, for instance 
         to support tests that don't work when ant runs under cygwin -->
	<target name="ccnd-testport">
		<mkdir dir="${testout}"/>
		<parallel failonany="true">
			<echo message="Running test ccnd on port ${TEST_PORT}"/>
			<exec executable="${ccnd}" dir="${testout}" output="${testout}/TEST-ccnd-baselib.txt">
				<env key="CCN_LOCAL_PORT" value="${TEST_PORT}"/>
				<env key="CCND_DEBUG" value="-1"/>
			</exec>
		</parallel>
	</target>
	
	<target name="repo" depends="repo-start, test-repo-is-up">
	</target>

	<!-- Don't run this by itself - use target repo -->
	<target name="repo-start" depends="jar, ccnd">
		<parallel>
			<daemons>
				<java classname="com.parc.ccn.network.daemons.repo.RepositoryDaemon" fork="true" failonerror="true" output = "${testout}/TEST-repo-daemon.txt" dir="${testout}">
					<classpath>
						<path refid="classpath-run" />
					</classpath>
					<sysproperty key="ccn.agent.port" value="${TEST_PORT}" />
					<jvmarg value="-Xrunjdwp:transport=dt_socket,address=25000,server=y,suspend=n" />
					<arg value="-interactive" />
					<arg value="-root" />
					<arg value="${REPO_LOCAL_ROOT}" />
					<arg value="-log" />
					<arg value="400" />
					<arg value="-local" />
					<arg value="${REPO_LOCAL}" />
					<arg value="-global" />
					<arg value="${REPO_GLOBAL}" />
				</java>
			</daemons>
            <!-- sleep needed so parallel doesn't exit before any error from daemons is reported -->
            <sleep seconds="1"/>
		</parallel>
	</target>
	
	<!-- Run this after starting repo to insure it's up before running further tests"/> -->
	<target name="test-repo-is-up" depends="jar,ccnd">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<batchtest todir="${testout}" >
				<fileset dir="${build}">
					<include name="test/ccn/network/daemons/repo/RepoInitializationTest.class"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- <delete dir="${REPO_ROOT}"/> -->
	</target>

    <!-- target for running a test repo foreground so you can run a test
	     against it in debugger -->
	<target name="run-test-repo" depends="jar">
		<java classname="com.parc.ccn.network.daemons.repo.RepositoryDaemon" fork="true" failonerror="true" output = "${testout}/TEST-repo-daemon.txt" dir="${testout}">
			<classpath>
				<path refid="classpath-run" />
			</classpath>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=25000,server=y,suspend=n" />
			<arg value="-interactive" />
			<arg value="-root" />
			<arg value="${REPO_ROOT}" />
			<arg value="-local" />
			<arg value="${REPO_LOCAL}" />
			<arg value="-global" />
			<arg value="${REPO_GLOBAL}" />
		</java>
        <!-- sleep needed so parallel doesn't exit before any error from daemons is reported -->
        <sleep seconds="1"/>
	</target>

	<!-- test is for running all current automated tests to validate code 
	     IMPORTANT: test-repo must be run before any test that will start a repo because it
	     requires that a repo *not* be running when it starts -->
	<target name="test" depends="test-repo, test-data, test-library, test-network, test-endtoend">
	</target>

	<target name="test-data" depends="test-data-without-repo, test-data-with-repo">
	</target>
	
	<target name="test-data-without-repo" depends="jar, ccnd">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" showoutput="${showoutput}" dir="${testout}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>

			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/data/*Test.class"/>
					<include name="test/ccn/data/content/*Test.class"/>
					<include name="test/ccn/data/query/*Test.class"/>
					<include name="test/ccn/data/security/*Test.class"/>
					<include name="test/ccn/data/util/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test-data-with-repo" depends="jar, ccnd, repo">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" showoutput="${showoutput}" dir="${testout}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="com.parc.ccn.LogLevel" value="FINEST"/>
			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/data/*TestRepo.class"/>
					<include name="test/ccn/data/content/*TestRepo.class"/>
					<include name="test/ccn/data/query/*TestRepo.class"/>
					<include name="test/ccn/data/security/*TestRepo.class"/>
					<include name="test/ccn/data/util/*TestRepo.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test-library" depends="test-library-without-repo, test-library-with-repo">
	</target>
	
	<target name="test-library-without-repo" depends="jar, ccnd">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>

			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/library/**/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="test-library-with-repo" depends="jar, ccnd, repo">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>

			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/library/**/*TestRepo.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test-network" depends="jar, ccnd">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>

			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/network/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- This target is for debugging only -->
	<target name="test-read" depends="jar, ccnd">

		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>

			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/library/ReadTest.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!-- This target is for debugging only -->
	<target name="test-blockreadwrite" depends="jar, ccnd">

		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>

			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/library/BlockReadWriteTest.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!-- IMPORTANT: test-repo-structure must be the *first* test in this list because subsequent test require
	     that the repo must not have been running when test-repo-structure is run -->
	<target name="test-repo" depends="test-repo-structure, test-repo-name-responder, test-repo-initial-read, test-repo-io">
	</target>
	
	<target name="test-enumerated-name-list" depends="jar, ccnd, repo">
				<mkdir dir="${testout}"/>
				<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
					<classpath>
						<path refid="classpath-run"/>
					</classpath>
					<formatter type="xml" usefile="true"/>
					<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
					<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
					<batchtest todir="${testout}" >
						<fileset dir="${build}">
							<include name="test/ccn/library/EnumeratedNameListTestRepo.class"/>
						</fileset>
					</batchtest>
				</junit>
				<!-- <delete dir="${REPO_ROOT}"/> -->
			</target>
	
	<target name="test-repo-structure" depends="jar, ccnd">
		<mkdir dir="${testout}"/>
		<delete dir="${REPO_ROOT}"/>
                <!-- Note that REPO_ROOT will be produced by the RFSTest
                     due to hard-coded file name in the test code -->
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/network/daemons/repo/RFSTest.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!-- This is for generating the repotest.zip file: note that the file 
             is not actually used any longer because we need to make data 
             with keys of current user so using a common file doesn't work -->
	<target name="generate-repotest-zip" depends="jar, ccnd, test-repo-structure">
	    <delete file="${repozip}"/>
		<zip destfile="${repozip}"
		    basedir="${REPO_ROOT}"
		    update="true">
		 </zip>
		<delete dir="${REPO_ROOT}" />
	</target>
	
	<target name="test-repo-initial-read" depends="jar, test-repo-structure, ccnd, repo">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<sysproperty key="com.parc.ccn.LogLevel" value="FINER"/>
			<batchtest todir="${testout}" >
				<fileset dir="${build}">
					<include name="test/ccn/network/daemons/repo/RepoInitialReadTest.class"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- <delete dir="${REPO_ROOT}"/> -->
	</target>
	
	<target name="test-repo-io" depends="jar, test-repo-structure, ccnd, repo">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<sysproperty key="com.parc.ccn.LogLevel" value="FINER"/>
			<batchtest todir="${testout}" >
				<fileset dir="${build}">
					<include name="test/ccn/network/daemons/repo/RepoIOTest.class"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- <delete dir="${REPO_ROOT}"/> -->
	</target>
	
	<target name="test-repo-objects" depends="jar, test-repo-structure, ccnd, repo">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<sysproperty key="com.parc.ccn.LogLevel" value="FINER"/>
			<batchtest todir="${testout}" >
				<fileset dir="${build}">
					<include name="test/ccn/network/daemons/repo/RepoEncodableObjectTest.class"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- <delete dir="${REPO_ROOT}"/> -->
	</target>

	
	<!-- Requires remote repo running -->
	<target name="test-remote-repo1" depends="jar">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/network/daemons/repo/RemoteRepoIOPutTest.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="test-remote-repo2" depends="jar">
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perBatch" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<batchtest todir="${testout}">
				<fileset dir="${build}">
					<include name="test/ccn/network/daemons/repo/RemoteRepoIOGetTest.class"/>
				</fileset>
			</batchtest>
		</junit>
		</target>
	
	<target name="test-repo-name-responder" depends="jar, ccnd, repo">
			<mkdir dir="${testout}"/>
			<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
				<classpath>
					<path refid="classpath-run"/>
				</classpath>
				<formatter type="xml" usefile="true"/>
				<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
				<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
				<batchtest todir="${testout}" >
					<fileset dir="${build}">
						<include name="test/ccn/network/daemons/repo/RepoNameEnumeratorTest.class"/>
					</fileset>
				</batchtest>
			</junit>
			<!-- <delete dir="${REPO_ROOT}"/> -->
		</target>



	<target name="test-puttap" depends="jar, ccnd">
		<!-- Note that puttap forces writes of encoded messages to a tap
            file for testing and debugging purposes.  It does not 
            need to have these messages reach any other process 
            and so does NOT need any ccnd to be running theoretically.
            We run against the test agent port just to avoid 
            unnecessarily polluting the real ccnd cache on the machine 
            However, hack in put to verify that the data made it 
            into cache cause test to block forever unless ccnd
            running and successfully handling data, 
            so we need to run ccnd (see deps above) and text XML doesn't work -->
		<mkdir dir="${testout}"/>
		<echo message="Running binary puttap tests"/>
		<java classname="com.parc.ccn.apps.puttap" classpathref="classpath-run" failonerror="true" output="${testout}/TEST-com.parc.cc.apps.puttap1.txt" fork="true">
			<arg value="1"/>
			<arg value="/CCNUnitTest/puttap"/>
			<arg file="${testout}/TEST-puttap1.out"/>
			<arg file="com/parc/ccn/apps/puttap.java"/>
			<arg file="-s"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<jvmarg line="${DEBUG_OPTIONS}"/>
		</java>
                <!-- TEMP: comment out the text XML tests due to put confirm hack
		<echo message="Running text XML puttap tests"/>
		<java classname="com.parc.ccn.apps.puttap" classpathref="classpath-run" failonerror="true" output="${testout}/TEST-com.parc.cc.apps.puttap0.txt" fork="true" timeout="5000">
			<arg value="0"/>
			<arg value="/CCNUnitTest/puttap"/>
			<arg file="${testout}/TEST-puttap0.out"/>
			<arg file="com/parc/ccn/apps/puttap.java"/>
			<arg file="-s"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<jvmarg line="${DEBUG_OPTIONS}"/>
		</java>    TEMP-->
	</target>

	<target name="test-endtoend" depends="jar, ccnd">
		<echo message="Running end-to-end test"/>
		<parallel failonany="true">
			<!-- timeout more than 2X average so sure timeout == failure -->
			<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perTest" timeout="60000" dir="${testout}" showoutput="${showoutput}">
				<classpath>
					<path refid="classpath-run"/>
				</classpath>
				<formatter type="xml" usefile="true"/>
				<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
				<test todir="${testout}"  name="test.ccn.endtoend.EndToEndTestSource"/>
			</junit>
			<junit printsummary="yes" haltonfailure="yes" fork="on" forkmode="perTest" timeout="60000" dir="${testout}" showoutput="${showoutput}">
				<classpath>
					<path refid="classpath-run"/>
				</classpath>
				<formatter type="xml" usefile="true"/>
				<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
				<test todir="${testout}"  name="test.ccn.endtoend.EndToEndTestSink"/>
			</junit>
		</parallel>
	</target>

	<target name="test-security" depends="test-security-without-repo, test-security-with-repo">
	</target>
	
	<target name="test-security-without-repo" depends="jar, ccnd">
		<!-- Access Control tests that don't need a repo running -->
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<sysproperty key="com.parc.ccn.LogLevel" value="FINER"/>
			<batchtest todir="${testout}" >
				<fileset dir="${build}">
					<include name="test/ccn/security/crypto/*Test.class"/>
					<include name="test/ccn/security/keys/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- <delete dir="${REPO_ROOT}"/> -->
	</target>

	<target name="test-security-with-repo" depends="jar, ccnd, repo">
		<!-- Access Control tests that need a repo running -->
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<sysproperty key="com.parc.ccn.LogLevel" value="FINER"/>
			<batchtest todir="${testout}" >
				<fileset dir="${build}">
					<include name="test/ccn/security/crypto/*TestRepo.class"/>
					<include name="test/ccn/security/keys/*TestRepo.class"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- <delete dir="${REPO_ROOT}"/> -->
	</target>

	<target name="test-access-control" depends="test-access-control-without-repo, test-access-control-with-repo">
	</target>
	
	<target name="test-access-control-without-repo" depends="jar, ccnd">
		<!-- Access Control tests that don't need a repo running -->
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<sysproperty key="com.parc.ccn.LogLevel" value="FINER"/>
			<batchtest todir="${testout}" >
				<fileset dir="${build}">
					<include name="test/ccn/security/access/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- <delete dir="${REPO_ROOT}"/> -->
	</target>

	<target name="test-access-control-with-repo" depends="jar, ccnd, repo">
		<!-- Access Control tests that need a repo running -->
		<mkdir dir="${testout}"/>
		<junit printsummary="yes" fork="on" forkmode="perBatch" haltonfailure="yes" dir="${testout}" showoutput="${showoutput}">
			<classpath>
				<path refid="classpath-run"/>
			</classpath>
			<formatter type="xml" usefile="true"/>
			<sysproperty key="ccn.agent.port" value="${TEST_PORT}"/>
			<sysproperty key="ccn.test.topdir" value="${TOP_DIR}"/>
			<sysproperty key="com.parc.ccn.LogLevel" value="FINER"/>
			<batchtest todir="${testout}" >
				<fileset dir="${build}">
					<include name="test/ccn/security/access/*TestRepo.class"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- <delete dir="${REPO_ROOT}"/> -->
	</target>

</project>

