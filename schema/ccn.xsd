<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!DOCTYPE xs:schema PUBLIC "-//W3C//DTD XMLSCHEMA 200102//EN" "XMLSchema.dtd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
<!-- XXX
        xmlns:ccn="http://www.parc.com/ccn" 
        targetNamespace="http://www.parc.com/ccn"
        elementFormDefault="unqualified"
        attributeFormDefault="unqualified"
-->

  <xs:annotation>
    <xs:documentation xml:lang="en">
      Content-Centric Networks data schema.
    </xs:documentation>
  </xs:annotation>

<!-- Top-level objects that can appear in 
     documents, messages, etc. -->
<xs:element name="CCNProtocolDataUnit"/> <!-- FIXTHIS - needs a type -->
<xs:element name="ContentObject" type="ContentObjectType"/>
<xs:element name="CompleteName" type="CompleteNameType"/>
<xs:element name="Collection" type="CollectionType"/>
<xs:element name="Link" type="LinkType"/>
<xs:element name="Header" type="HeaderType"/>
<xs:element name="Interest" type="InterestType"/>

<xs:complexType name="CollectionType">
  <xs:sequence>
    <xs:element name="Link" type="LinkType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="LinkType">
  <xs:sequence>
    <xs:element name="Name" type="NameType"/>
    <xs:element name="LinkAuthenticator" type="LinkAuthenticatorType" minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="LinkAuthenticatorType">
  <xs:sequence>
    <xs:element name="PublisherID" type="PublisherIDType" minOccurs="0" maxOccurs="1"/>
    <xs:element name="NameComponentCount" type="xs:nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
    <xs:element name="Timestamp" type="xs:dateTime" minOccurs="0" maxOccurs="1"/>
    <xs:element name="Type" type="ContentType" minOccurs="0" maxOccurs="1"/>
    <xs:element name="ContentDigest" type="Base64BinaryType" minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="HeaderType">
  <xs:sequence>
    <xs:element name="Start" type="xs:nonNegativeInteger"/>
    <xs:element name="Count" type="xs:nonNegativeInteger"/>
    <xs:element name="BlockSize" type="xs:nonNegativeInteger"/>
    <xs:element name="Length" type="xs:nonNegativeInteger"/>
    <xs:element name="RootDigest" type="Base64BinaryType"/>
    <xs:element name="ContentDigest" type="Base64BinaryType" minOccurs="0"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="NameType">
  <xs:sequence>
    <xs:element name="Component" type="Base64BinaryType"
                minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="Base64BinaryType">
  <xs:simpleContent>
    <xs:extension base="xs:base64Binary">
      <xs:attribute name="ccnbencoding" type="xs:string" fixed="base64Binary"/>
    </xs:extension>
  </xs:simpleContent>
</xs:complexType>
    
<!-- Note: SignedInfo was formerly known as ContentAuthenticator -->
<xs:complexType name="SignedInfoType">
  <xs:sequence>
    <xs:element name="PublisherKeyID" type="KeyIDType"/>
    <xs:element name="Timestamp" type="xs:dateTime"/> <!-- should be canonical -->
    <xs:element name="Type" type="ContentType" minOccurs="0" maxOccurs="1"/>
    <!-- The optional FreshnessSeconds indicates how many seconds a node
                 should wait after the arrival of this ContentObject before
                 marking it as stale. -->
    <xs:element name="FreshnessSeconds" type="xs:nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
    <!-- A KeyLocator tells where to find the key to verify this content.
                 This is signed, but may be omitted when the signer
		 is really sure that everyone on the path can find the
		 key. (In theory, does not need to be signed; you can't verify
                 the signature over it until you have the key, and by then you
		 know whether it was correct or not. Not signing it would also
		 allow it to be replaced by updated information known to the
		 forwarder.  DoS attacks mounted by omitting it can be
		 mounted whether it is signed or not; as can attacks mounted
		 by modifying it maliciously.) The PublisherKeyID in the
		 SignedInfo is what is used as the real fast selector
                 to identify the signer of this content, not the locator.
                 The reason for leaving the locator in the signed component
                 of the packet is the risk of selective DOS attacks - if
		 credentials attached to a key can be found only by locating
		 it within a certain namespace, one could replace the
		 publisher's locator with another that pointed to the same key
		 but made it seem as if it lacked those credentials. -->
    <xs:element name="KeyLocator" type="KeyLocatorType" minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
</xs:complexType>

<!-- Encapsulate some of the possible bits necessary to verify the
	 mapping. -->
<xs:complexType name="SignatureType">
  <xs:sequence>
	<!-- We either need to include a digest algorithm or a signature
		 algorithm here. X.509 uses a sigalg up front (and again in
		 the signature), PKCS#7 and XML signature uses a digest up
		 front. Most APIs require us to know the signature algorithm,
		 not the digest algorithm, to begin the verification process.
		 Putting the signature up front along with this algorithm
		 forces us to store the signature till we need it, but
		 allows us to not repeat the algorithm. Expressing just a
		 digest algorithm forces us to assume that a give key can
		 only be used for one algorithm (depending on how we encode
		 the signature). Also, if we digest the content before including
		 it in the signature, we need to know what digest algorithm to
		 use. We either have to assume it's the same one as for the
		 signature, or standard one (with a separate, elided expression
		 of version to allow later change if this one is broken).
		 Right now, take the theory that a) signature algorithms
		 are likely less standard for us than digest algorithms. So
		 specify a digest algorithm here to increase our options of
		 eliding it (default = sha-256). b) for now, sign the content
		 directly rather than re-hashing it.  -->
	<xs:element name="DigestAlgorithm" type="xs:string"
					 default="2.16.840.1.101.3.4.2.1"
                                         minOccurs="0" maxOccurs="1" /> 
	<!-- A Witness is additional information necessary to verify the
		 signature in some algorithms. For elements authenticated
		 using a Merkle Hash Tree, the witness information would be
		 the elements of the hash path through the tree. -->
	<xs:element name="Witness" type="Base64BinaryType" minOccurs="0" maxOccurs="1" />
	<!-- The signature over the name, content authenticator, and content. -->
    <xs:element name="SignatureBits" type="Base64BinaryType"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="ContentObjectType">
  <xs:sequence>
	<!-- Signature over name, content authenticator, and the digest
		 of the content. Place first to allow grouping of Signature+Name
		 and Name+Authenticator for various applications. -->
	<xs:element name="Signature" type="SignatureType"/>
	<xs:element name="Name" type="NameType"/>
	<xs:element name="SignedInfo" type="SignedInfoType"/>
	<!-- The content to be signed. As there is no longer a proxy for
             (digest of) the content explicitly in the authenticator, you
             need the content itself to verify the signature. Because we
	     generally need to compute the digest of the content anyway,
	     we do so prior to signing. Given that, we either need to pick
	     a standard digest algorithm for content and always use it
	     (presumably SHA-256), at which point we need a version number
	     for messages, in case SHA-256 is broken and we need to change.
	     Or, we need to specify what digest to use in each message. --> 
	<xs:element name="Content" type="Base64BinaryType"/>
  </xs:sequence>
</xs:complexType>

<!-- Sometimes we just need to talk about mappings (everything needed
     to authenticate a name) without the content itself.  Since we
     have moved the proxy for the content out of the content
     authenticator, this information is no longer sufficient to
     authenticate the content. We will have to look carefully at where
     and how it is used. -->
<xs:complexType name="CompleteNameType">
  <xs:sequence>
    <xs:element name="Signature" type="SignatureType"/>
    <xs:element name="Name" type="NameType"/>
    <xs:element name="SignedInfo" type="SignedInfoType"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="InterestType">
  <xs:sequence>
    <xs:element name="Name" type="NameType"/>
    <xs:element name="NameComponentCount" type="xs:nonNegativeInteger"
                        minOccurs="0" maxOccurs="1"/>
    <xs:element name="AdditionalNameComponents" type="xs:nonNegativeInteger"
                        minOccurs="0" maxOccurs="1"/>
    <xs:element name="PublisherID" type="PublisherIDType"
			minOccurs="0" maxOccurs="1"/>
    <xs:element name="Exclude" type="ExcludeType"
                        minOccurs="0" maxOccurs="1"/>
    <xs:element name="OrderPreference" type="xs:nonNegativeInteger"
                        minOccurs="0" maxOccurs="1"/>
    <xs:element name="AnswerOriginKind" type="xs:nonNegativeInteger"
                        minOccurs="0" maxOccurs="1"/>
    <xs:element name="Scope" type="xs:nonNegativeInteger"
			minOccurs="0" maxOccurs="1"/>
    <xs:element name="Count" type="xs:nonNegativeInteger"
                        minOccurs="0" maxOccurs="1"/>
    <xs:element name="Nonce" type="Base64BinaryType"
			minOccurs="0" maxOccurs="1"/>
    <xs:element name="ExperimentalResponseFilter" type="Base64BinaryType"
			minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="ExcludeType">
  <xs:sequence>
     <xs:element name="Bloom" type="Base64BinaryType"
                        minOccurs="0" maxOccurs="1"/>
     <xs:sequence minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Component" type="Base64BinaryType"/>
        <xs:element name="Bloom" type="Base64BinaryType"
                        minOccurs="0" maxOccurs="1"/>
     </xs:sequence>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="PublisherIDType">
  <xs:simpleContent>
    <xs:extension base="SHA256Digest">
      <xs:attribute name="type" type="PublisherTypeType" use="required"/>
      <xs:attribute name="ccnbencoding" type="xs:string" fixed="base64Binary"/>
    </xs:extension>
  </xs:simpleContent>
</xs:complexType>

<xs:complexType name="KeyIDType">
  <xs:simpleContent>
    <xs:extension base="SHA256Digest">
      <xs:attribute name="ccnbencoding" type="xs:string" fixed="base64Binary"/>
    </xs:extension>
  </xs:simpleContent>
</xs:complexType>

<xs:simpleType name="SHA256Digest">
    <xs:restriction base="xs:base64Binary">
      <!-- SHA-256 digest -->
      <xs:length value="32" fixed="true"/>
    </xs:restriction>
</xs:simpleType>

<!-- enum -->
<xs:simpleType name="PublisherTypeType">
  <xs:restriction base="xs:string">
    <xs:enumeration value="KEY"/>
    <xs:enumeration value="CERTIFICATE"/>
    <xs:enumeration value="ISSUER_KEY"/>
    <xs:enumeration value="ISSUER_CERTIFICATE"/>
  </xs:restriction>
</xs:simpleType>

<!-- enum -->
<xs:simpleType name="ContentType">
  <xs:restriction base="xs:string">
    <xs:enumeration value="DATA"/>
    <xs:enumeration value="LINK"/>
    <xs:enumeration value="COLLECTION"/>
    <xs:enumeration value="SESSION"/>
    <xs:enumeration value="HEADER"/>
    <xs:enumeration value="KEY"/>
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="KeyLocatorType">
  <xs:sequence>
    <xs:choice>
      <xs:element name="Key" type="Base64BinaryType"/>
      <xs:element name="Certificate" type="Base64BinaryType"/>
      <xs:element name="KeyName" type="KeyNameType"/>
    </xs:choice>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="KeyNameType">
  <xs:sequence>
    <xs:element name="Name" type="NameType"/>
    <xs:element name="PublisherID" type="PublisherIDType"
			minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
</xs:complexType>

</xs:schema>
