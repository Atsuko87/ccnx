How the "high water mark" is used by Sync:


The high level picture is that the high wter mark is used to avoid complete  enumerations when Sync/Repo starts up from a previous state.  By limiting the enumerations to changes beyond the high water mark for the Repo we reduce the time taken to initialize Sync when it starts up.

The high water mark is not used when creating a new collection since in general there is no good way to exclude names in the past from being relevant to the collection (there are some possible special cases, but we don't try to ue them).


1.  In SyncBase.SyncNewBase, priv->stableTarget and priv->stableStored are initially set to CCNR_NULL_HWM, and priv->lastStable is set to the base create time.

2.  In SyncBase.SyncNotifyContent, priv->stableTarget is updated (using ccnr_hwm_update) whenever a new name is accepted.

3.  In SyncActions.fetchStablePoint, ccnr_hwm_decode is used to convert a uintmax_t to a ccnr_hwm when reading the stable point for the base.  There is an implicit assumption of one base per repo, which is really a design flaw!

4.  In SyncActions.storeStablePoint, ccnr_hwm_encode is used to convert from a ccnr_hwm to a uintmax_t to make a storable value for wringin out the stable point.  Same bad assumption about a single stable point per Repo.

5.  In SyncActions.isRootStableEnough a ccnr_hwm target is passed in but is not used.  Not clear if there is a good reason to ever include that target (probably not).

6.  In SyncActions.HeartbeatAction, the stable point for the cache entry is compared against the stable point for the root (using ccnr_hwm_compare), and if it is better then we  update the stablePoint for the root.  Also, if the new stablePoint is better than the global stableTarget then we update the stableTarget.

7.  In SyncActions.HeartbeatAction, if the stableTarget is beyond stableStored, and all roots are stable enough, then a new stable point is written using storeStablePoint.  For debug, ccnr_hwm_encode is used to report the value to the log.

8.  In SyncActions.SyncStartHeartbeat, if we can retrieve the stable point (fetchStablePoint) then we pass that to r_sync_notify_after.

9.  In SyncActions.SyncAddName, we update the highWater mark for the root (ccnr_hwm_update) when we get a new name to add, which comes with a ccnr_accession item.  We also update the global highWater mark, even if the name is not added.

10.  In SyncActions.UpdateAction, the stablePoint stored in the cache entry for the root node is set from the highWater point in the root (root->priv->highWater).  Debug output reports it using ccnr_hwm_encode.




