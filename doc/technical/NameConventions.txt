CCNx Name Conventions
=====================

== Generic name structure
   * First component for globally-routable content will usually be a DNS name.  For more local scopes, other names can be used.
   * The next several name components (0 or more) are human readable, analogous to file names.  These should use `UTF-8` encoding, and are always case sensitive.
   * This may be followed by encrypted components, if the application calls for that.
   * The next-to-last explicit component is used for versioning.  Details below.
   * The last explicit component is used for sequencing, that is, to distinguish the pieces that make up the whole.  Details below.
   * The content digest always comes last, and it is not represented explicitly in the wire representation of a ContentObject.
   * Meta-data associated with a versioned object may have whole hierarchy of its own, rooted at any prefix that makes sense to the application.
Keep in mind that these are just conventions that have extra support in the libraries to make them efficient and easy to use.  Applications may choose to do their own thing.

== Coding space
The specification of `UTF-8` prohibits certain octet values from occurring anywhere in a `UTF-8` encoded string.  These are the (hex) octet values `C0`, `C1`, and `F5` to `FF`.  In addition, the null octet `00` is used for string termination and so does not encode a usable character.  Thus these make good markers to help identify components of a CCNx name that play special roles such as versioning and sequence numbering, since they won't appear in portions of the name intended for humans.  Note, though, that the primary indication of the component's role is its position in the name, the marker byte simply acting as a check that the component is indeed intended to play that role.  The marker appears as the _first_ byte of the component.

== Versioning FD
Versions, when present, occupy the next-to-last component of the CCNx name, not counting the digest component.  They are chosen based (primarily) on time.  The first byte of the version component is `0xFD`. The remaining bytes are a big-endian binary encoding of the time, expressed in units of 2**(-12) seconds since the start of Unix time, using the minimum number of bytes.  The time portion will thus take 48 bits until quite a few centuries from now (_Sun, 20 Aug 4147 07:32:16 GMT_, if you must know), at which point an additional byte will be required. With 12 bits of fraction, this format allows for sub-millisecond resolution.

The client generating the version stamp should try to avoid using a stamp earlier than (or the same as) any version of the file, to the extent that it knows about it.  It should also avoid generating stamps that are unreasonably far in the future.

.Example:
.........
February 13, 2009 3:31:30 PM PST = 1234567890.000 seconds since January 1, 1970 UT
1234567890 = 0x499602d2
<Component ccnbencoding="hexBinary">FD 0 499602d2 000</Component>
<Component ccnbencoding="base64Binary">/QSZYC0gAA==</Component>
.........

== Sequencing 00, FB
Sequence numbers occupy the final component of the CCNx name (again, not counting the digest component).
For consecutive numbering, the first byte of the sequence component is 0x00.
The remaining bytes hold the sequence number in big-endian binary, using the minimum number of bytes.
Thus sequence number 0 is encoded in just one byte, `%00`, and sequence number 1 is `%00%01`.
Note that this encoding is not quite dense - `%00%00` is unused, as are other components that start with these two bytes.
For non-consecutive numbering (e.g, using byte offsets) the value 0xFB may be used as a marker.

.Example: Sequence 257 is
.......................................................
<Component ccnbencoding="hexBinary">000101</Component>
or
<Component ccnbencoding="base64Binary">AAEB</Component>
.......................................................

== Headers and unfragmented content
Short content does not require CCNx fragmenting, and so does not need a header object.
Long content is fragmented and may have an associated header object.
Generally the single-leaf data should live at the same place in the name hierarchy as would the the header entry for the segmented case, because under normal conditions you would expect to have only one of them present.
(A CCNx link is another possibility.)

In the case that versioning is used, it is desirable to preserve the position of the version component in the name even for these items.  Thus a zero-length component is used to hold this place.  The link:URI.html[CCNx URI scheme] spells this as "...", so we might have

....
 ccnx:/parc.com/diana/favorite_color/%FD%04%99%60%2d%2000/.../<digest>
....
as the name for either the header or the single leaf.

== Extensible Command Markers C0

In a variety of situations we need components that represent commands or annotations that can appear at arbitrary levels in the name hierarchy, intermixed with the human readable components analogous to pieces of file names.   In these cases, the position in the name is not able to distinguish the component's role and we must rely on the marker and that apps will follow these overall conventions so as to make the markers unambiguous.

Multiple separate indications may be needed within a command protocol and future extensibility is also required, so we cannot simply allocate each special UTF-8 non-value to a single function.  The first byte of a generic command marker is %C0, the next several bytes identify the command protocol which for common protocols will be chosen to be human readable, and the remaining bytes will be defined within the command protocol.  Note that the Name Enumeration protocol is an example of such a command protocol.

