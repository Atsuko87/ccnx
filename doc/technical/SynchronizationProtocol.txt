CCNx Synchronization Protocols
==============================

DRAFT

== Introduction

The CCNx Create Collection Protocol is used to define a collection of Content Objects to be synchronized with identical collections at remote nodes. At a high-level, the process for creating a collection and starting synchronization is as follows:

1. Write a definition of the collection to be synchronized (known as a _slice_) to the local Repository as described in <<CreateCollectionProtocol,CCNx Create Collection Protocol>> below.

2. Write an identical definition to a remote Repository. (This is done by an application at the remote node.) There must be hash code equality over the two collections (i.e., agreement on the topological prefix, naming prefix, and filter classes as <<TermDefinitions,described below>>), and the two Repositories must be neighbors (i.e., ccnd scope = 2).

[[CreateCollectionProtocol]]

== CCNx Create Collection Protocol

A slice is created by writing a specially-formatted Content Object to the Repository using the standard Start Write or Checked Start Write command as described in link:RepoProtocol.html[CCNx Repository Protocols]. The response to the write request is a +RepositoryInfo+ object as described in link:RepositoryInfoObject.html[CCNx RepositoryInfo Object]. If the command is accepted, the response +Type+ is  +INFO+; if the request is in error, the response +Type+ is +DATA+ and error info is returned in the +Name+ element of the object.

The format of the Content Object is as follows:

.......................................................
Content Object ::= Name
		Command Marker
		Slice Hash
		Version
		Segment
		Content
.......................................................

=== Name

+Name+ is required, and must be +%C1.M.S.localhost/+, which restricts the definition to the local node and Repository.

=== Command Marker
+Command Marker+ is required, and must be +%C1.S.cs+ for Create Slice.

=== Slice Hash
+Slice Hash+ is required, and must be the hash over the ccnb encoding of the configuration slice for the root.

=== Version
+Version+ is required, and must follow normal CCN naming practices. (See link:NameConventions.html[CCNx Basic Name Conventions].)

=== Segment
+Segment+ is required, and must follow normal CCN naming practices. (See link:NameConventions.html[CCNx Basic Name Conventions].)

=== Content
+Content+ is required, and must contain the following
[[TermDefinitions]]
* A _topological prefix_ for exchanging information about the collection. Its purpose is to enable the proper routing of Sync protocol messages between Sync Agents in different nodes. The objective is to allow the high-level Content Object namespace to be partitioned for separate administration and routing; for the present, only one topological prefix is used.

* A _naming prefix_, such that all of the names in the set share a given prefix.

* An optional filter that limits the names to a subset of those that share the naming prefix, and may be omitted if all content names under the prefix are included. When used, the filter is a set of clauses expressed as prefixes that may contain wild card components.

** Each wild card component in a filter clause matches a single component in a name.

** The encoding of a wild card component is the single byte 255 (+0xFF+). To enable byte 255 to start a literal component, any pattern component that starts with byte 255 and has more than 1 byte is treated as the literal component consisting of the bytes following the initial byte.

** A name matches a filter if it matches any of the filter prefix clauses. (All components are required.) Components of a name longer than the filter clause are accepted as matching. For example, using CCN URI syntax, the clause +/X/%FF/Z+ matches the names +/X/Y/Z+ and +/X/Y/Z/W+, but does not match the name +/X/Z+.

The protocol for defining a collection is illustrated below.

image:CreateSliceProtocol.png[align="center"]

When a slice is defined in a Repository, the Repository begins trying to synchronize the collection with neighboring Repositories. When an identical slice is defined in a neighboring Repository, automatic synchronization of the two collections begins.


== Synchronization Protocol

The <<CreateCollectionProtocol,CCNx Create Collection Protocol>> above is all that is needed for an application to define a collection to be synchronized with identical collections in neighboring Repositories. After a collection has been defined, synchronization-related messages can be observed on the network. This section describes that protocol.

A Sync Agent is the component in each node that is responsible for synchronizing collections in its associated Repository with identical collections in neighboring Repositories. The Synchronization Protocol is the dialog between Sync Agents to perform this function. Each collection is synchronized independently of all others.

Each collection is represented as a sync tree. A Sync Agent has a configuration that specifies the sync trees it is to build. This configuration can be defined at initialization time, and can be expanded through use of <<CreateCollectionProtocol,Create Slice>> commands.

As Content Objects are added to a Repository, their names are passed to the local Sync Agent, which updates appropriate sync trees. The Sync Agent communicates with other Sync Agents to find names in remote sync trees that are not present in corresponding local sync trees, fetches missing content as necessary, and stores that content to the Repository.

=== Root Advise Interest

A Root Advise Interest is used to determine when the names in a remote collection might differ from the names in the local collection. For each local sync tree, a Sync Agent expresses a Root Advise Interest of the following form:

.......................................................
		/Topo/%C1.S.ra/Slice Hash/Root Hash
.......................................................
where:
[[RootAdviseComponents]]
* +Topo+ is the topological prefix for the sync tree.

* +%C1.S.ra+ is the command marker for the Root Advise Interest.

* +Slice Hash+ is a hash code that names the collection. Computing +Slice Hash+ uses the CCN default hash algorithm to form a hash over the ccnb encoding of the configuration slice for the root.

* +Root Hash+ is the combined hash of the root node for the sync tree.

The Root Advise Interest is essentially a request for a Repository to respond with the root node for a corresponding sync set that does not have a combined hash equal to +Root Hash+. The Interest may also contain an exclusion list for combined hashes already examined, so remote trees need only be examined once for missing content. Since updates to the sync tree should be seen within a reasonable time, a short freshness seconds for the response is used.

A Repository with a corresponding sync set that does not have a combined hash of +Root Hash+ should respond, otherwise, no response should be made.

The response to a Root Advise interest has a name of the form

.......................................................
		/Topo/%C1.S.ra/Slice Hash/Root Hash/Response Hash/version/segment
.......................................................
where:

* +Topo+, +Slice Hash+, and +Root Hash+ are as <<RootAdviseComponents,described above>> and must be the same as for the request.

* +Response Hash+ is the hash for the responderâ€™s root.

* The +version+ and +segment+ are optional, and follow normal CCN naming practice. (See link:NameConventions.html[CCNx Basic Name Conventions].)

The Content Object in the response has one of two forms.  The most general form of the response is to include the root node of the remote sync tree of the responding Sync.  In the case of relatively few changes, a "delta" response may be used, where the Content Object has a list of the names that changed since the last sync tree root.

As a Sync Agent examines a remote sync tree, it may encounter combined hash codes that it finds are included in the local sync tree. In the above example, regardless of updates to the local sync tree, there is no need to receive remote roots with hashes of +Root Hash+ or +Response Hash+ in response to subsequent Root Advise requests. The CCN interest mechanism allows them to be excluded using an exclusion filter. This minimizes the likelihood of responses containing names that are already known to be included in the local tree.

=== Node Fetch Interest

When Root Hashes differ, the Sync Agent must fetch nodes of the remote sync tree that it does not yet have in order to compare the sync trees. To name these nodes, the Sync Agent uses a Node Fetch Interest using a name of the form

.......................................................
		/Topo/%C1.S.nf/Slice Hash/Response Hash 
.......................................................
where:
[[NodeFetchComponents]]
* +Topo+ and +Slice Hash+ are as <<RootAdviseComponents,described above>> for Root Advise.

* +%C1.S.nf+ is a command marker for the Node Fetch Interest.

* +Response Hash+ is the combined hash for the desired node that was returned in response to the Root Advise.

Note that the Root Advise refers to the nodes at the root of the sync trees, while the Node Fetch can fetch from any part of the sync tree.

The response has a name of the form

.......................................................
	/Topo/%C1.S.nf/Slice Hash/Response Hash/version/segment
.......................................................
where:

* +Topo+ +Slice Hash+, and +Response Hash+ are as <<RootAdviseComponents,described above>> for Node Fetch, and must be the same as for the request.

* The +version+ and +segment+ are optional, and follow normal CCN naming practice. (See link:NameConventions.html[CCNx Basic Name Conventions].)

The content for the response is the ccnb encoding of the requested tree node.

As Content Objects are found in remote Repositories that are not in the local Repository, they are fetched using normal CCN Interests (see link:InterestMessage.html[CCNx Interest Message]) and stored in the local Repository.

=== Example

The Synchronization Protocol is illustrated in the following simple example. 

In this example, there are two applications: App-1 and App-2, running on separate nodes. Each node has a Repo/Sync pair attached to the application. Assume that both applications wish to have identical contents for a shared collection.

image:InternalSyncProtocol.png[align="center"]

1. At t1, application App-1 creates a collection. We will assume that nothing in Repo-1 matches the collection description, so the collection is initially empty.

2. At t2, Sync-1 sends a Root Advise Interest. Even through the collection is empty, a neighboring Repository might have a matching collection that is not empty. In this example, there is no matching collection, so there is no reply.

3. At t3, App-1 stores some content into Repo-1. This causes Sync-1 to notice that the empty sync tree is no longer valid, so it builds a new sync tree that describes the content.

4. At t4, the new sync tree has been built and is stable.

5. At t5 Sync-1 sends another Root Advise Interest. Since there is still no matching collection, there is no response.

6. At t6, a second application, App-2 running on node-2, creates a matching collection (using the identical description as App-1 created).  The collection is initially empty.

7. At t7, Sync-2 sends a Root Advise Interest.

8. At t8, Sync-1 sends a Root Advise reply because, while Sync-1 has a matching collection, the root hash from Sync-2 does not match the root hash for Sync-1.

9. At t9, Sync-2 notices that its local sync tree root hash does not match the root hash that it received from Sync-1, so it begins to build a new sync tree.

10. At t10, Sync-2 sends a content Interest since, in this simple example, there is only one Content Object to fetch.

11. At t11, Repo-1 replies with the Content Object.  

12. At t12, all of the sync tree differences have been resolved, and a new sync tree has been built by Sync-2 and is stable. At this point, the collections are identical at both Repo-1 and Repo-2.

13. At t13, the last event, Sync-2 sends a final Root Advise Interest, since there may be differences that have not yet been noticed between its local sync tree and some other remote sync trees. In this example, the two Repositories have the same contents for the collection, and therefore the same root hash, so Sync-1 does not reply.

From this point on, Sync-1 and/or Sync-2 will periodically send Root Advise Interests (with no responses) until the collection is updated at one of the nodes, at which time the sequence from t6 and beyond is repeated.


